Klasser, förklarningar och implementering av TSIM finns under cd Lab1/trainspotting/src/TSim/

tåg1 -> int trainId
tåg2 -> int trainId
- för att få tågnummer använd getTrainId() som returnerar tågnummret för eventet. 
- getEvent() fungerar på motsvarande sätt men anger vilket typ av event som skedde. 
- Båda metoderna kommer från klassen TrainEvents(int trainId, int event) som skapar nytt event.

Fyra switchar (switch[n], n=0-3) uppifrån och ner
Fyra sensorer (sens[k], k=0-3) uppifrån och ner
- SensorEvent(int trainId, int xPos, int yPos, int status) skapar ett event. Varje argument kan plockas m.h.a get<arg>()
- int status är antingen Active eller Inactive

Sensorerna bör kolla tåg.speed(), vilken switch de har närmst sett till egen färdriktning och switchens läge (left/right). Den informationen måste sedan få switcharna att om nödvändigt byta läge

Switcharna får inte ändras simultant: om båda kommer mot samma switch måste en semaphore avgöra vilken som går först. Den som blir utelåst sätts i vänteläge.

Vänteläget gör att det utelåsta tåget stannar och bör vara en (i början) godtyckligt lång tid.
När vänteläget släpper ska tåget åter sättas i fart.

Hur ska tågen veta vilken väg de ska ta? 
- Tågen bör gå mot kortaste vägen. Om spåret i fråga är upptaget, ta det andra.
Hur vet vi vilken väg som är kortast?
- Förslag: hårdkoda kartan och bestäm på så sätt rälsarnas längd.  

Sensorer ger följande information:
- trainId,
- xPos och yPos för sensorn,
- status (active, inactive)
Baserat på detta och om ett tåg är på nästa spår måste switcharna
ställas in. 


  Semaphore crossing = new Semaphore(1);
  Semaphore stn2_over = new Semaphore(0);
  Semaphore stn2_under = new Semaphore(1);
  Semaphore curve_right = new Semaphore(1);
  Semaphore curve_left = new Semaphore(1);
  Semaphore straight1_over = new Semaphore(0);
  Semaphore straight1_under = new Semaphore(1);
  Semaphore straight2_over = new Semaphore(1);
  Semaphore straight2_under = new Semaphore(1);

Behövs en tom else{} om inget mer ska hända för att 
while(true) ska fortsätta iterera?